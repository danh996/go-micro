version: '3'

services:

  caddy:
    image: danh996/micro-caddy:1.0.0
    deploy:
      mode: replicated
      replicas: 1
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - caddy_data:/data
      - caddy_config:/config

  broker-services:
    build:
      context: ./../broker-service #source code folder
      dockerfile: ./../broker-service/broker-service.dockerfile
    restart: always
    ports:
      - "8088:80" #localhost : docker service
    deploy:
      mode: replicated
      replicas: 1
  
  authentication-service:
    build:
      context: ./../authentication-service
      dockerfile: ./../authentication-service/authentication-service.dockerfile
    restart:
      always
    ports:
      - "8081:80"
    deploy:
      mode: replicated
      replicas: 1
    environment:
      DSN: "host=postgres port=5432 user=postgres password=password dbname=users sslmode=disable timezone=UTC connect_timeout=5"
      #using postgres container port
      #if using localhost we can use host=postgres and port and 5454

  logger-services:
    build:
      context: ./../logger-service #source code folder
      dockerfile: ./../logger-service/logger-service.dockerfile
    restart: always #'don't need port becase not export to localhost
    deploy:
      mode: replicated
      replicas: 1

  listener-services:
    build:
      context: ./../listener-service #source code folder
      dockerfile: ./../listener-service/listener-service.dockerfile
    restart: always #'don't need port becase not export to localhost
    deploy:
      mode: replicated
      replicas: 1
  postgres:
    image: 'postgres:14.0'
    ports:
      - "5454:5432" #localhost : docker service
    restart: always
    deploy:
      mode: replicated
      replicas: 1
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: users
    volumes:
      - ./db-data/postgres/:/var/lib/postgresql/data/ #localhost : docker container

  mongo:
    image: 'mongo:4.2.16-bionic'
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: logs
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - ./db-data/mongo/:/data/db

  mailhog:
    image: "mailhog/mailhog:latest"
    ports:
      - "1025:1025"
      - "8025:8025"
      
  rabbitmq:
    image: "rabbitmq:3.9.24-alpine"
    ports: 
      - "5672:5672"
    deploy:
      mode: replicated
    volumes:
      - ./db-data/rabbitmq/:/var/lib/rabbitmq
    

volumes:
  caddy_data: 
    external: true
  caddy_config:
  
      